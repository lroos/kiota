# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  paths:
    exclude:
      [
        "abstractions/**",
        "authentication/**",
        "serialization/**",
        "http/**",
        "**.md",
        ".vscode/**",
        "**.svg",
      ]
  tags:
    include:
      - "v*"
    exclude:
      - "*preview*" # exclude preview tags so we don't publish twice
schedules:
- cron: "0 18 * * 4" # 18:00 UTC every Thursday ~ 14:00 EST every Thursday
  displayName: Weekly preview
  branches:
    include:
      - main
  always: true

variables:
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"
  ProductBinPath: '$(Build.SourcesDirectory)\src\kiota\bin\$(BuildConfiguration)'
  previewBranch: "refs/heads/main"

stages:
  - stage: build
    jobs:
      - job: update_appsettings
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            clean: true
            submodules: true

          - pwsh: $(Build.SourcesDirectory)/scripts/update-versions.ps1
            displayName: "Update dependencies versions"

          - pwsh: |
              New-Item -Path $(Build.ArtifactStagingDirectory)/AppSettings -ItemType Directory -Force -Verbose
              Copy-Item $(Build.SourcesDirectory)/src/kiota/appsettings.json $(Build.ArtifactStagingDirectory)/AppSettings/appsettings.json -Force -Verbose
            displayName: Prepare staging folder for upload

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: AppSettings"
            inputs:
              ArtifactName: AppSettings
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/AppSettings"

      - job: build
        dependsOn: [update_appsettings]
        pool:
          vmImage: windows-latest # needed for compliance tasks
        steps:
          - checkout: self
            clean: true
            submodules: true

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: AppSettings
              source: current
              targetPath: $(Build.ArtifactStagingDirectory)/AppSettings

          - pwsh: |
              Copy-Item $(Build.ArtifactStagingDirectory)/AppSettings/appsettings.json $(Build.SourcesDirectory)/src/kiota/appsettings.json -Force -Verbose
            displayName: Copy the appsettings.json

          - task: UseDotNet@2
            displayName: "Use .NET 6" # needed for ESRP signing
            inputs:
              version: 6.x

          - task: UseDotNet@2
            displayName: "Use .NET 8"
            inputs:
              version: 8.x

          # Install the nuget tool.
          - task: NuGetToolInstaller@0
            displayName: "Use NuGet >=6.1.0"
            inputs:
              versionSpec: ">=6.1.0"
              checkLatest: true

          - pwsh: $(Build.SourcesDirectory)/scripts/get-prerelease-version.ps1 -currentBranch $(Build.SourceBranch) -previewBranch $(previewBranch) -excludeHeadingDash
            displayName: "Set version suffix"
            
          - pwsh: $(Build.SourcesDirectory)/scripts/update-version-suffix-for-source-generator.ps1 -versionSuffix "$(versionSuffix)"
            displayName: "Set version suffix in csproj for generators"

          - pwsh: $(Build.SourcesDirectory)/scripts/get-version-from-csproj.ps1
            displayName: "Get Kiota's version-number from .csproj"

          - pwsh: $(Build.SourcesDirectory)/scripts/get-release-notes.ps1 -version $(artifactVersion)
            condition: eq(variables['isPrerelease'], 'false')
            displayName: "Get release notes from CHANGELOG.md"

          - pwsh: $(Build.SourcesDirectory)/scripts/get-release-notes.ps1 -version Unreleased
            condition: eq(variables['isPrerelease'], 'true')
          
          # Build the Product project
          - task: DotNetCoreCLI@2
            condition: eq(variables['isPrerelease'], 'true')
            displayName: "build"
            inputs:
              projects: '$(Build.SourcesDirectory)\kiota.sln'
              arguments: '--configuration $(BuildConfiguration) --no-incremental --version-suffix "$(versionSuffix)"'
          
          # Build the Product project
          - task: DotNetCoreCLI@2
            condition: eq(variables['isPrerelease'], 'false')
            displayName: "build"
            inputs:
              projects: '$(Build.SourcesDirectory)\kiota.sln'
              arguments: '--configuration $(BuildConfiguration) --no-incremental'

          # Run the Unit test
          - task: DotNetCoreCLI@2
            displayName: "test"
            inputs:
              command: test
              projects: '$(Build.SourcesDirectory)\kiota.sln'
              arguments: "--configuration $(BuildConfiguration) --no-build"

          - task: EsrpCodeSigning@2
            displayName: "ESRP CodeSigning"
            inputs:
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: src
              signConfigType: inlineSignParams
              UseMinimatch: true
              Pattern: |
                **\*.exe
                **\*.dll
              inlineOperation: |
                [
                    {
                        "keyCode": "CP-230012",
                        "operationSetCode": "SigntoolSign",
                        "parameters": [
                        {
                            "parameterName": "OpusName",
                            "parameterValue": "Microsoft"
                        },
                        {
                            "parameterName": "OpusInfo",
                            "parameterValue": "http://www.microsoft.com"
                        },
                        {
                            "parameterName": "FileDigest",
                            "parameterValue": "/fd \"SHA256\""
                        },
                        {
                            "parameterName": "PageHash",
                            "parameterValue": "/NPH"
                        },
                        {
                            "parameterName": "TimeStamp",
                            "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                        }
                        ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    },
                    {
                        "keyCode": "CP-230012",
                        "operationSetCode": "SigntoolVerify",
                        "parameters": [ ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    }
                ]
              SessionTimeout: 20

          # Pack
          - pwsh: dotnet pack $(Build.SourcesDirectory)/src/kiota/kiota.csproj -o $(Build.ArtifactStagingDirectory) --configuration $(BuildConfiguration) --no-build --include-symbols --include-source /p:SymbolPackageFormat=snupkg --version-suffix "$(versionSuffix)"
            condition: eq(variables['isPrerelease'], 'true')
            displayName: "pack kiota"

          - pwsh: dotnet pack $(Build.SourcesDirectory)/src/kiota/kiota.csproj -o $(Build.ArtifactStagingDirectory) --configuration $(BuildConfiguration) --no-build --include-symbols --include-source /p:SymbolPackageFormat=snupkg
            condition: eq(variables['isPrerelease'], 'false')
            displayName: "pack kiota"

          - pwsh: dotnet pack $(Build.SourcesDirectory)/src/Kiota.Builder/Kiota.Builder.csproj -o $(Build.ArtifactStagingDirectory) --configuration $(BuildConfiguration) --no-build --include-symbols --include-source /p:SymbolPackageFormat=snupkg --version-suffix "$(versionSuffix)"
            condition: eq(variables['isPrerelease'], 'true')
            displayName: "pack kiota builder"

          - pwsh: dotnet pack $(Build.SourcesDirectory)/src/Kiota.Builder/Kiota.Builder.csproj -o $(Build.ArtifactStagingDirectory) --configuration $(BuildConfiguration) --no-build --include-symbols --include-source /p:SymbolPackageFormat=snupkg
            condition: eq(variables['isPrerelease'], 'false')
            displayName: "pack kiota builder"

          - task: EsrpCodeSigning@2
            displayName: "ESRP CodeSigning Nuget Packages"
            inputs:
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: "$(Build.ArtifactStagingDirectory)"
              UseMinimatch: true
              Pattern: "*.nupkg"
              signConfigType: inlineSignParams
              inlineOperation: |
                [
                    {
                        "keyCode": "CP-401405",
                        "operationSetCode": "NuGetSign",
                        "parameters": [ ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    },
                    {
                        "keyCode": "CP-401405",
                        "operationSetCode": "NuGetVerify",
                        "parameters": [ ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    }
                ]
              SessionTimeout: 20

          - task: CopyFiles@2
            displayName: Prepare staging folder for upload
            inputs:
              targetFolder: $(Build.ArtifactStagingDirectory)/Nugets
              sourceFolder: $(Build.ArtifactStagingDirectory)
              content: "*.nupkg"

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: Nugets"
            inputs:
              ArtifactName: Nugets
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/Nugets"


      - job: build_binaries
        dependsOn: [update_appsettings]
        pool:
          vmImage: $(vmImage)
        strategy:
          matrix:
            win-x86:
              architecture: 'win-x86'
              vmImage: 'ubuntu-latest'
            win-x64:
              architecture: 'win-x64'
              vmImage: 'ubuntu-latest'
            linux-x64:
              architecture: 'linux-x64'
              vmImage: 'ubuntu-latest'
            osx-x64:
              architecture: 'osx-x64'
              vmImage: 'macOS-latest'
            osx-arm64:
              architecture: 'osx-arm64'
              vmImage: 'macOS-latest'
        steps:
          - checkout: self
            clean: true
            submodules: true
          - task: UseDotNet@2
            displayName: "Use .NET 6" # needed for ESRP signing
            inputs:
              version: 6.x
          - task: UseDotNet@2
            displayName: "Use .NET 8"
            inputs:
              version: 8.x

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: AppSettings
              source: current
              targetPath: $(Build.ArtifactStagingDirectory)/AppSettings

          - pwsh: |
              Copy-Item $(Build.ArtifactStagingDirectory)/AppSettings/appsettings.json $(Build.SourcesDirectory)/src/kiota/appsettings.json -Force -Verbose
            displayName: Copy the appsettings.json

          - pwsh: $(Build.SourcesDirectory)/scripts/get-prerelease-version.ps1 -currentBranch $(Build.SourceBranch) -previewBranch $(previewBranch) -excludeHeadingDash
            displayName: "Set version suffix"

          - pwsh: $(Build.SourcesDirectory)/scripts/update-version-suffix-for-source-generator.ps1 -versionSuffix "$(versionSuffix)"
            displayName: "Set version suffix in csproj for generators"

          - pwsh: dotnet publish src/kiota/kiota.csproj -c Release --runtime $(architecture) -p:PublishSingleFile=true --self-contained --output $(Build.ArtifactStagingDirectory)/binaries/$(architecture) --version-suffix "$(versionSuffix)"
            condition: eq(variables['isPrerelease'], 'true')
            displayName: publish kiota as executable

          - pwsh: dotnet publish src/kiota/kiota.csproj -c Release --runtime $(architecture) -p:PublishSingleFile=true --self-contained --output $(Build.ArtifactStagingDirectory)/binaries/$(architecture)
            condition: eq(variables['isPrerelease'], 'false')
            displayName: publish kiota as executable

          - task: AzureKeyVault@2
            displayName: "Azure Key Vault: Get Secrets"
            inputs:
              azureSubscription: "MicrosofGraphKeyVault connection"
              KeyVaultName: MicrosofGraphKeyVault
              SecretsFilter: "graph-cli-apple-developer-certificate,graph-cli-apple-developer-certificate-password"
            condition: and(succeeded(), startsWith(variables['architecture'], 'osx'))
          - bash: |
              set -e
              security create-keychain -p pwd $(agent.tempdirectory)/buildagent.keychain
              security default-keychain -s $(agent.tempdirectory)/buildagent.keychain
              security unlock-keychain -p pwd $(agent.tempdirectory)/buildagent.keychain
              echo "$(graph-cli-apple-developer-certificate)" | base64 -D > $(agent.tempdirectory)/cert.p12
              security import $(agent.tempdirectory)/cert.p12 -k $(agent.tempdirectory)/buildagent.keychain -P "$(graph-cli-apple-developer-certificate-password)" -T /usr/bin/codesign
              security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k pwd $(agent.tempdirectory)/buildagent.keychain
              codesign -s 6V7V694XP3 --deep --force --options runtime --entitlements scripts/entitlements.plist $(Build.ArtifactStagingDirectory)/binaries/$(architecture)/kiota
            displayName: Set Hardened Entitlements
            condition: and(succeeded(), startsWith(variables['architecture'], 'osx'))

          - task: EsrpCodeSigning@2
            condition: and(succeeded(), startsWith(variables['architecture'], 'win'))
            inputs:
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: $(Build.ArtifactStagingDirectory)/binaries/$(architecture)
              signConfigType: inlineSignParams
              UseMinimatch: true
              inlineOperation: |
                [
                    {
                        "keyCode": "CP-230012",
                        "operationSetCode": "SigntoolSign",
                        "parameters": [
                        {
                            "parameterName": "OpusName",
                            "parameterValue": "Microsoft"
                        },
                        {
                            "parameterName": "OpusInfo",
                            "parameterValue": "http://www.microsoft.com"
                        },
                        {
                            "parameterName": "FileDigest",
                            "parameterValue": "/fd \"SHA256\""
                        },
                        {
                            "parameterName": "PageHash",
                            "parameterValue": "/NPH"
                        },
                        {
                            "parameterName": "TimeStamp",
                            "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                        }
                        ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    },
                    {
                        "keyCode": "CP-230012",
                        "operationSetCode": "SigntoolVerify",
                        "parameters": [ ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    }
                ]
              SessionTimeout: 20
              Pattern: |
                **\*.exe
                **\*.dll
          - pwsh: Remove-Item $(Build.ArtifactStagingDirectory)/binaries/$(architecture)/*.md -Verbose -Force -ErrorAction SilentlyContinue
          - task: ArchiveFiles@2
            displayName: Archive binaries
            inputs:
              rootFolderOrFile: $(Build.ArtifactStagingDirectory)/binaries/$(architecture)
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/binaries/$(architecture).zip
              replaceExistingArchive: true
          - task: EsrpCodeSigning@2
            condition: and(succeeded(), startsWith(variables['architecture'], 'osx'))
            inputs:
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: $(Build.ArtifactStagingDirectory)/binaries
              signConfigType: inlineSignParams
              UseMinimatch: true
              inlineOperation: |
                [
                    {
                        "keyCode": "CP-401337-Apple",
                        "OperationCode": "MacAppDeveloperSign",
                        "Parameters": {
                          "Hardening": "--options=runtime"
                        },
                        "ToolName": "sign",
                        "ToolVersion": "1.0"
                    }
                ]
              SessionTimeout: 20
              Pattern: |
                **/*.zip
          - task: EsrpCodeSigning@2
            condition: and(succeeded(), startsWith(variables['architecture'], 'osx'))
            inputs:
              ConnectedServiceName: "microsoftgraph ESRP CodeSign DLL and NuGet (AKV)"
              FolderPath: $(Build.ArtifactStagingDirectory)/binaries
              signConfigType: inlineSignParams
              UseMinimatch: true
              inlineOperation: |
                [
                    {
                        "keyCode": "CP-401337-Apple",
                        "OperationCode": "MacAppNotarize",
                        "Parameters": {
                          "BundleId": "com.microsoft.kiota"
                        },
                        "ToolName": "sign",
                        "ToolVersion": "1.0"
                    }
                ]
              SessionTimeout: 20
              Pattern: |
                **/*.zip
          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: binaries"
            inputs:
              ArtifactName: Binaries
              PathToPublish: "$(Build.ArtifactStagingDirectory)/binaries/$(architecture).zip"


      - job: build_vscode_extension
        dependsOn: [build_binaries]
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            clean: true
            submodules: true
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: Binaries
              source: current
              targetPath: $(Build.ArtifactStagingDirectory)/Binaries
          - pwsh: $(Build.SourcesDirectory)/scripts/get-prerelease-version.ps1 -currentBranch $(Build.SourceBranch) -previewBranch $(previewBranch)
            displayName: "Set version suffix"
          - pwsh: $(Build.SourcesDirectory)/scripts/get-version-from-csproj.ps1
            displayName: "Get Kiota's version-number from .csproj"
          - pwsh: $(Build.SourcesDirectory)/scripts/update-vscode-releases.ps1 -version $(artifactVersion)$(versionSuffix) -filePath $(Build.SourcesDirectory)/vscode/microsoft-kiota/package.json -binaryFolderPath $(Build.ArtifactStagingDirectory)/Binaries
            displayName: "Update VSCode extension version-number"
          - pwsh: npm i -g @vscode/vsce
            displayName: "Install vsce"
          - pwsh: npm ci
            displayName: "Install dependencies"
            workingDirectory: $(Build.SourcesDirectory)/vscode/microsoft-kiota
          - pwsh: vsce package --pre-release
            displayName: "Package VSCode extension as pre-release"
            workingDirectory: $(Build.SourcesDirectory)/vscode/microsoft-kiota
            condition: eq(variables['isPrerelease'], 'true')
          - pwsh: vsce package
            displayName: "Package VSCode extension as release"
            workingDirectory: $(Build.SourcesDirectory)/vscode/microsoft-kiota
            condition: eq(variables['isPrerelease'], 'false')
          - task: CopyFiles@2
            displayName: Prepare staging folder for upload
            inputs:
              targetFolder: $(Build.ArtifactStagingDirectory)/VSCode
              sourceFolder: $(Build.SourcesDirectory)/vscode/microsoft-kiota
              contents: "*.vsix"
          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: VSCode"
            inputs:
              ArtifactName: VSCode
              PathToPublish: "$(Build.ArtifactStagingDirectory)/VSCode"

  - stage: deploy
    condition: and(or(contains(variables['build.sourceBranch'], 'refs/tags/v'), eq(variables['build.sourceBranch'], variables['previewBranch'])), succeeded())
    dependsOn: build
    jobs:
      - job: vs_marketplace
        variables:
          - group: kiota-vscode-extension-publish
        dependsOn: 
          - github_release
        pool:
          vmImage: ubuntu-latest
        steps:
          - download: none
          - checkout: self
            clean: true
            submodules: true
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: VSCode
              source: current
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
          - pwsh: npm i -g @vscode/vsce
          - pwsh: $(Build.SourcesDirectory)/scripts/get-prerelease-version.ps1 -currentBranch $(Build.SourceBranch) -previewBranch $(previewBranch)
            displayName: "Set version suffix"
          - pwsh: |
              Get-ChildItem -Path $(Pipeline.Workspace) -Filter *.vsix -Recurse | ForEach-Object {
                Write-Host "Publishing $_.FullName"
                if ($Env:isPrerelease -eq "true") {
                  Write-Host "Publishing $_.FullName as a pre-release"
                  vsce publish --pat "$(vs-marketplace-token)" --packagePath $_.FullName --pre-release
                }
                else {
                  Write-Host "Publishing $_.FullName as a release"
                  vsce publish --pat "$(vs-marketplace-token)" --packagePath $_.FullName
                }
              }
            env:
              isPrerelease: $(isPrerelease)
      - deployment: github_release
        dependsOn: []
        environment: kiota-github-releases
        pool:
          vmImage: ubuntu-latest
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - checkout: self
                  clean: true
                  submodules: true
                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifact: Binaries
                    source: current
                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifact: VSCode
                    source: current
                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifact: Nugets
                    source: current
                - pwsh: $(Build.SourcesDirectory)/scripts/get-prerelease-version.ps1 -currentBranch $(Build.SourceBranch) -previewBranch $(previewBranch)
                  displayName: "Set version suffix"
                - pwsh: $(Build.SourcesDirectory)/scripts/get-version-from-csproj.ps1
                  displayName: "Get Kiota's version-number from .csproj"
                - pwsh: $(Build.SourcesDirectory)/scripts/get-release-notes.ps1 -version $(artifactVersion) -createNotes
                  condition: eq(variables['isPrerelease'], 'false')
                  displayName: "Get release notes from CHANGELOG.md"
                - pwsh: $(Build.SourcesDirectory)/scripts/get-release-notes.ps1 -version Unreleased -createNotes
                  condition: eq(variables['isPrerelease'], 'true')
                  displayName: "Get release notes from CHANGELOG.md"
                - task: GitHubRelease@1
                  condition: eq(variables['isPrerelease'], 'false')
                  inputs:
                    gitHubConnection: 'microsoftkiota'
                    tagSource: userSpecifiedTag
                    tag: 'v$(artifactVersion)'
                    title: 'v$(artifactVersion)'
                    releaseNotesSource: filePath
                    releaseNotesFilePath: $(Build.SourcesDirectory)/release-notes.txt
                    assets: |
                      $(Pipeline.Workspace)/*.zip
                      $(Pipeline.Workspace)/*.vsix
                      $(Pipeline.Workspace)/*.nupkg
                      $(Pipeline.Workspace)/*.snupkg
                    addChangeLog: false
                - task: GitHubRelease@1
                  condition: eq(variables['isPrerelease'], 'true')
                  inputs:
                    gitHubConnection: 'microsoftkiota'
                    tagSource: userSpecifiedTag
                    tag: 'v$(artifactVersion)$(versionSuffix)'
                    title: 'v$(artifactVersion)$(versionSuffix)'
                    releaseNotesSource: filePath
                    releaseNotesFilePath: $(Build.SourcesDirectory)/release-notes.txt
                    assets: |
                      $(Pipeline.Workspace)/*.zip
                      $(Pipeline.Workspace)/*.vsix
                      $(Pipeline.Workspace)/*.nupkg
                      $(Pipeline.Workspace)/*.snupkg
                    addChangeLog: false
                    isPreRelease: true

      - deployment: deploy_kiota
        dependsOn: []
        environment: nuget-org
        pool:
          vmImage: ubuntu-latest
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  displayName: Download nupkg from artifacts
                  inputs:
                    artifact: Nugets
                    source: current
                - powershell: |
                    Remove-Item "$(Pipeline.Workspace)/Microsoft.OpenApi.Kiota.Builder.*.nupkg" -Verbose
                  displayName: remove other nupkgs to avoid duplication
                - task: NuGetCommand@2
                  displayName: "NuGet push"
                  inputs:
                    command: push
                    packagesToPush: "$(Pipeline.Workspace)/Microsoft.OpenApi.Kiota.*.nupkg"
                    nuGetFeedType: external
                    publishFeedCredentials: "OpenAPI Nuget Connection"

      - deployment: deploy_builder
        dependsOn: []
        environment: nuget-org
        pool:
          vmImage: ubuntu-latest
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  displayName: Download nupkg from artifacts
                  inputs:
                    artifact: Nugets
                    source: current
                - powershell: |
                    Remove-Item "$(Pipeline.Workspace)/Microsoft.OpenApi.Kiota.*.nupkg" -Verbose -Exclude "*.Builder.*"
                  displayName: remove other nupkgs to avoid duplication
                - task: NuGetCommand@2
                  displayName: "NuGet push"
                  inputs:
                    command: push
                    packagesToPush: "$(Pipeline.Workspace)/Microsoft.OpenApi.Kiota.Builder.*.nupkg"
                    nuGetFeedType: external
                    publishFeedCredentials: "OpenAPI Nuget Connection"
